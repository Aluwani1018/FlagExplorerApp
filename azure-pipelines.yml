trigger:  
- main  

pool:  
vmImage: 'ubuntu-latest'  

variables:  
azureSubscription: '<Your-Azure-Subscription>'  
containerRegistry: '<Your-ACR-Name>.azurecr.io'  
imageName: 'flagexplorerapp'  
appServiceNameDev: '<Your-App-Service-Name-Dev>'  
appServiceNameTest: '<Your-App-Service-Name-Test>'  
appServiceNameStaging: '<Your-App-Service-Name-Staging>'  
appServiceNameProd: '<Your-App-Service-Name-Prod>'  
buildConfiguration: 'Release'  

stages:  
- stage: Build  
displayName: Build Stage  
jobs:  
- job: Build  
  displayName: Build and Push Docker Image  
  steps:  
  - task: UseDotNet@2  
    inputs:  
      packageType: 'sdk'  
      version: '8.x'  
  - script: |  
      dotnet build --configuration $(buildConfiguration)  
      docker build -t $(containerRegistry)/$(imageName):$(Build.BuildId) .  
      docker login $(containerRegistry) -u $(ACR_USERNAME) -p $(ACR_PASSWORD)  
      docker push $(containerRegistry)/$(imageName):$(Build.BuildId)  
    displayName: Build and Push Docker Image  

- stage: Test  
displayName: Test Stage  
dependsOn: Build  
jobs:  
- job: UnitTests  
  displayName: Run Unit Tests  
  steps:  
  - task: UseDotNet@2  
    inputs:  
      packageType: 'sdk'  
      version: '8.x'  
  - script: |  
      dotnet test --configuration $(buildConfiguration) --no-build --filter "Category=Unit"  
    displayName: Run Unit Tests  

- job: IntegrationTests  
  displayName: Run Integration Tests  
  steps:  
  - task: UseDotNet@2  
    inputs:  
      packageType: 'sdk'  
      version: '8.x'  
  - script: |  
      dotnet test --configuration $(buildConfiguration) --no-build --filter "Category=Integration"  
    displayName: Run Integration Tests  

- stage: Deploy_Development  
displayName: Deploy to Development  
dependsOn: Test  
jobs:  
- deployment: DeployDev  
  displayName: Deploy to Development  
  environment: Development  
  strategy:  
    runOnce:  
      deploy:  
        steps:  
        - task: AzureWebAppContainer@1  
          inputs:  
            azureSubscription: $(azureSubscription)  
            appName: $(appServiceNameDev)  
            containerRegistry: $(containerRegistry)  
            imageName: $(imageName)  
            tag: $(Build.BuildId)  

- stage: Deploy_Testing  
displayName: Deploy to Testing  
dependsOn: Deploy_Development  
jobs:  
- deployment: DeployTest  
  displayName: Deploy to Testing  
  environment: Testing  
  strategy:  
    runOnce:  
      deploy:  
        steps:  
        - task: AzureWebAppContainer@1  
          inputs:  
            azureSubscription: $(azureSubscription)  
            appName: $(appServiceNameTest)  
            containerRegistry: $(containerRegistry)  
            imageName: $(imageName)  
            tag: $(Build.BuildId)  

- stage: Deploy_Staging  
displayName: Deploy to Staging  
dependsOn: Deploy_Testing  
jobs:  
- deployment: DeployStaging  
  displayName: Deploy to Staging  
  environment: Staging  
  strategy:  
    runOnce:  
      deploy:  
        steps:  
        - task: AzureWebAppContainer@1  
          inputs:  
            azureSubscription: $(azureSubscription)  
            appName: $(appServiceNameStaging)  
            containerRegistry: $(containerRegistry)  
            imageName: $(imageName)  
            tag: $(Build.BuildId)  

- stage: Deploy_Production  
displayName: Deploy to Production  
dependsOn: Deploy_Staging  
jobs:  
- deployment: DeployProd  
  displayName: Deploy to Production  
  environment: Production  
  strategy:  
    runOnce:  
      deploy:  
        steps:  
        - task: AzureWebAppContainer@1  
          inputs:  
            azureSubscription: $(azureSubscription)  
            appName: $(appServiceNameProd)  
            containerRegistry: $(containerRegistry)  
            imageName: $(imageName)  
            tag: $(Build.BuildId)
